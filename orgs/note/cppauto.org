#+title: C++11 auto 注意事项
#+date: <2016-03-04 五>
#+tags: c++, c++11


* [[fa fa-fw][]] 简要说明
auto可以在声明变量时根据变量初始值的类型自动为此变量选择匹配的类型。C++语言类似的关键字还有decltype。

举例：对于值x=1；即可以声明：int x = 1或long x = 1，也可以直接声明auto x = 1。

其它语言的类似功能包括C#的var关键字。

具体的参考[[https://zh.wikipedia.org/wiki/Auto_(C%252B%252B)][WIKI]]

* [[fa fa-fw][]]  注意事项

** [[fa fa-fw][]] 推导规则
 - 去引用，会把表达式的引用去掉
 - 会去掉const等限定符
 - 如果第一条规则显示加上引用 *&* , 第二条不生效
   
*** [[fa fa-fw][]] 例子
#+begin_src c++
const int v1 = 101; // const int
auto v2 = v1; // int
auto& v3 = v1; // cont int &
const auto& v4 = v1; // const int &
vector<int> a1 = {10, 11, 12, 13}; // std::vector<int, std::allocator<int> >
auto a2 = {10, 11, 12, 13}; // std::initialized_list<int>
auto a3 = a1; // std::vector<int, std::allocator<int> >
auto& a4 = a1; // std::vector<int, std::allocator<int> >&
#+end_src
看一下调试信息

[[gdb_small.png][调试信息]]

#+ATTR_HTML:  :alt 
[[gdb_big.png]]

可以看到与上面的规则一致，使用的时候要注意一下。

*** for in 或者其它迭代
#+begin_src c++
#include <iostream>
#include <string>
#include <vector>
#include <map>

using namespace std;

class Test
{
    public:
    Test()
    {
        
    }
    Test(const Test& t) // 更改默认拷贝函数 
    {
        
    }
    string name;
};

int main()
{
    map<int, Test> maps;
    for(auto i = 0; i < 10; i++)
    {
        // auto test = maps[i]; // 不加&表示是拷贝，要显示的加上&
        auto& test = maps[i];
        test.name = to_string(rand() % 100);
    }
    
    cout << "no &" << endl;
    for(auto it : maps)
    {
        cout << it.second.name;
    }
    
    cout << "\nwith &" << endl;
    for(auto &it : maps)
    {
        cout << it.second.name;
    }
}
#+end_src
上面的例子，可以看出在 for : 的时候不加&获得是拷贝即使是map,在protobuf中吃了好多次亏

*** 以后发现再续
